// all funtions are call-by-name

let Deutsch(f) = 
    // dot "." to show it is a composite system
    let (x . y) = Uf(f, new(+) . new(-)) in
    (H . measure)(x . y)
    // (H(x), measure(y))
    //((x . y) . z)
    // (x . y . z)
    // (x . y)

// mark it unitary to use as a quantum gate
// Uf : (T' -> Int) -> qubit -> qubit -> ((qubit . qubit) -> (qubit . qubit))
let unitary Uf(f, x, y) = 
    // controlledByInt : (T' -> Int) -> qubit -> (qubit -> qubit)
    (I . (fun q -> controlledByInt(f(x), q)))(x . y)
    // (x, (fun q -> controlledByInt(f(x), q)) y )

// CNOT : (qubit . qubit) -> (qubit . qubit)
let EPR = CNOT((new(+) . new(0))))

let bellMeasure(q1 . q2) = 
    let (x . y) = CNOT(q1 . q2) in
    (measure(H(x)), measure(H(y)))

let telep = 
    let (x . y) = EPR in
    let f(shared) = bellMeasure(x, shared) in
    let encode((xPower, zPower), qubit) = 
        X^xPower(Z^zPower(qubit))
    in
    let U(qubit, (x, y)) = 
        encode((x, y), qubit)
    in
    let g((xPower, yPower)) = U(y, (xPower, yPower)) in
    (f, g)

// tensor : (qubit -> qubit) -> (qubit -> qubit) -> ((qubit . qubit) -> (qubit . qubit))
// tensor : qubit -> qubit -> (qubit . qubit)
//SetQubitState(initial, q0);
//SetQubitState(Zero, q1);
//
//H(q0);
//CNOT(q0, q1);
//let res = M(q0);